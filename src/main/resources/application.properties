spring.application.name=restapi
management.endpoints.web.exposure.include=*
#spring.h2.console.enabled=false
#spring.datasource.url=jdbc:h2:mem:userdb
spring.h2.console.path=/h2-console
spring.jpa.defer-datasource-initialization=true
spring.jpa.show-sql=true

#Spring security takes all the request and goes through Spring Security to be authenticated
#If request does not have authentication by default a web page is shown
#CSRF -> POST, PUT
#Configure spring security password and username so it stays consistent
spring.security.user.name=username
spring.security.user.password=password

#Spring JPA does not autoconfigure when were talking to actual database like MYSQL
spring.jpa.hibernate.ddl-auto=update 
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#Connecting to MYSQL Databse using Docker
#Url to connect
spring.datasource.url=jdbc:mysql://localhost:3306/social-media-database
#Username
spring.datasource.username=social-media-user
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#Password
spring.datasource.password=dummypassword


#Connecting mysqlsh to mysql
#\connect socia-media-user@localhost:3306
#Password
#Setting up enviroment for SQL
#\sql -> makes the sql shell sql mode
#can run sql lines like select * from user_details;
#IF I DONT KNOW THE TABLE NAME TYPE
### show tables;
#always single quote marks and ; at the end
#even if we stop the application still can query


#@Before	Before method runs
#@After	After method runs (success or error)
#@AfterReturning	After method returns OK
#@AfterThrowing	After method throws an error
#@Around	Full control (before + after + modify things)

#Script to run Docker Container
#docker run --detach
# --env MYSQL_ROOT_PASSWORD=dummypassword
# --env MYSQL_USER=social-media-user
# --env MYSQL_PASSWORD=dummypassword
# --env MYSQL_DATABASE=social-media-database THE NAME OF THE DATABASE
# --name mysql
# --publish 3306:3306
# mysql:8-oracle


#create sequence post_entity_seq start with 1 increment by 50
#Hibernate: create sequence user_details_seq start with 1 increment by 50
#Hibernate: create table post_entity (id integer not null, user_id integer, description varchar(255), primary key (id))
#Hibernate: create table user_details (birth_date date, id integer not null, name varchar(255), primary key (id))
#Hibernate: alter table if exists post_entity add constraint FKbdn75bnc48tmeyocre66lkj95 foreign key (user_id) references user_details


# When using API using JPa/HIBERNATE we get logs for this instance first is getting the user and 2nd is getting the post accordingly to the user_id
#Hibernate: select um1_0.id,um1_0.birth_date,um1_0.name from user_details um1_0 where um1_0.id=?
#Hibernate: select p1_0.user_id,p1_0.id,p1_0.description from post_entity p1_0 where p1_0.user_id=?